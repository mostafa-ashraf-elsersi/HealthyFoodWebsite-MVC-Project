
@model List<BlogPost>

@section Styles {
    <style>
        .deactivation-cover {
            position: absolute;
            height: 100%;
            width: 100%;
            background-color: rgba(193, 215, 215, 0.5);
        }
    </style>
}

<!-- Post-Update Alert -->
@if (ViewBag.PostUpdated == 1)
{
    <div id="post-update-alert" class="alert alert-dismissible fixed-bottom bg-primary" style="margin-left: 10px; max-width: 300px; z-index: 100;">
        <button type="button" class="btn-close" onclick="closePostUpdateAlert()"></button>
        <span style="color: white; text-align: justify;">Post updated successfully!</span>
    </div>
}
<!-- Post-Update Alert -->

<!-- Page Header Start -->
<div class="container-fluid page-header wow fadeIn" data-wow-delay="0.1s">
    <div class="container">
        <h1 class="display-3 mb-3 animated slideInDown" style="color:darkblue">Blog Grid</h1>
        <nav aria-label="breadcrumb animated slideInDown">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a class="text-dark" asp-controller="Home" asp-action="GetView">Home</a></li>
                <li class="breadcrumb-item" style="color:white" aria-current="page">Pages</li>
                <li class="breadcrumb-item active" style="color:white" aria-current="page">Blog Grid</li>
            </ol>
        </nav>
    </div>
</div>
<!-- Page Header End -->
<!-- Blog Start -->
<div class="container-xxl py-5">
    <div class="container">
        <div class="section-header text-center mx-auto mb-5 wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
            <h1 class="display-5 mb-3">Our Blog</h1>
            <p>Check our posts on the website</p>
        </div>
        <div class="row g-4">
            @{
                foreach (var post in Model)
                {
                    <div id="post-number-@post.Id" class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.3s">
                        <div class="position-relative bg-light overflow-hidden">
                            <div id="post-deactivation-cover-@post.Id" style="min-height:300px" class="deactivation-cover @(post.IsDisplayed == true ? "invisible" : "")"></div>
                            <a asp-controller="BlogPost" asp-action="GetBlogPost" asp-route-postId="@post.Id"><img class="img-fluid w-100" style="min-height:300px" src="@post.PosterUri" alt=""></a>
                        </div>
                        <div class="bg-light p-4">
                            <a class="d-block h5 lh-base mb-4" asp-controller="BlogPost" asp-action="GetBlogPost" asp-route-postId="@post.Id" >@post.Title</a>
                            <div class="d-flex justify-content-between text-muted border-top pt-4">
                                <small class="me-3"><i class="fa fa-user text-primary me-2"></i>@post.AuthorType</small>
                                <small class="me-3"><i class="fa fa-calendar text-primary me-2"></i>@post.PublishingDate</small>
                            </div>

                             @if (User.IsInRole("BusinessOwner"))
                            {
                                <div class="d-flex flex-column mt-4 border-top">
                                    <div class="form-check form-switch my-2">
                                        <input class="form-check-input" role="checkbox" id="visibilitySwitch" asp-for=@post.IsDisplayed onclick="deactivatePostAsync(@post.Id)">
                                        <label class="form-check-label" for="visibilitySwitch">Show / Hide</label>
                                    </div>
                                    <a class="btn btn-primary mb-2" asp-action="Update" asp-route-id=@post.Id>Update</a>
                                    <!-- Button trigger modal -->
                                    <button class="btn btn-danger mb-2" type="button" data-bs-toggle="modal" data-bs-target="#postStaticBackdrop-@post.Id">Delete</button>
                                </div>
                            }

                        </div>
                    </div>

                    <!-- Modal -->
                    <div class="modal fade" id="postStaticBackdrop-@post.Id" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="postDeletionModal" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Deletion Confirmation!</h1>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete this post?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary" onclick="deletePostAsync(@post.Id)" data-bs-dismiss="modal">Yes, I meant it</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>
<!-- Blog End -->
<!-- Pagination Start -->
<nav class="mb-5" aria-label="Blog Pages Navigation">
    <ul class="pagination justify-content-center">

        @{
            var totalPagesCount = (int)ViewBag.PagesCount;
            List<int> groupList = new(4); // The number 4 here is the number of pages to be shown in the pagination view, generally.
            List<List<int>> groupsList = new();

            int currentIndex;
            int.TryParse(Context.Request.QueryString.Value?.Split("=")[1], out currentIndex);
            var previousIndex = currentIndex - 1;
            var nextIndex = currentIndex + 1;


            for(byte i = 1; i <= totalPagesCount; i++)
            {
                groupList.Add(i);

                if (i % 5 == 0 || i == totalPagesCount)
                {
                    groupsList.Add(new List<int>(groupList));
                    groupList.Clear();
                }
            }


            List<int> shouldBeRenderedPages = new();
            foreach (var group in groupsList)
            {
                if (group.Contains(currentIndex + 1))
                {
                    shouldBeRenderedPages = group;
                    break;
                }
            }


            <li class="page-item @(previousIndex == -1 ? "disabled" : "")"><a class="page-link" asp-route-pageIndex="@(previousIndex < 0 ? 0 : previousIndex)">Previous</a></li>

            foreach(int pageNumber in shouldBeRenderedPages)
            {
                <li class="page-item @(currentIndex == (pageNumber - 1) ? "active" : "")"><a class="page-link" asp-route-pageIndex="@(pageNumber - 1)">@pageNumber</a></li>

                if (!(totalPagesCount - pageNumber == 1) && pageNumber != totalPagesCount && shouldBeRenderedPages.Count == 5)
                {
                    if (pageNumber == shouldBeRenderedPages[3])
                    {
                        <li class="page-item disabled"><a class="page-link">...</a></li>
                        <li class="page-item @(currentIndex == (totalPagesCount - 1) ? "active" : "")"><a class="page-link" asp-route-pageIndex="@(totalPagesCount - 1)">@(totalPagesCount)</a></li>
                    }
                }
            }

            <li class="page-item @(nextIndex == totalPagesCount ? "disabled" : "")"><a class="page-link" asp-route-pageIndex="@(nextIndex > totalPagesCount ? totalPagesCount : nextIndex)">Next</a></li>
        }

    </ul>
</nav>
<!-- Pagination End -->

@section Scripts {
    <script>

        function closePostUpdateAlert() {
            let alertDiv = document.getElementById("post-update-alert");
            alertDiv.classList.add(["d-none"]);
        }

        async function deletePostAsync(id) {
            $.support.cors = true;
            await $.ajax({
                url: `/BlogPost/Delete/${id}`,
                type: "GET",
                cache: false,
                success: (result, status, xhr) => {
                    if (result == true) {
                        const deletedPost = document.getElementById(`post-number-${id}`);
                        deletedPost.remove();
                    }
                },
                error: (xhr, status, error) => { }
            });
        }

        async function deactivatePostAsync(id) {
            $.support.cors = true;
            await $.ajax({
                url: `/BlogPost/Deactivate/${id}`,
                type: "GET",
                cache: false,
                success: (result, status, xhr) => {
                    if (result == true) {
                        const postDeactivationCover = document.getElementById(`post-deactivation-cover-${id}`);
                        postDeactivationCover.classList.toggle("invisible");
                    }
                },
                error: (xhr, status, error) => { }
            });
        }

    </script>
}